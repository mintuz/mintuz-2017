{"version":3,"sources":["webpack:///./src/components/head-blog.js","webpack:///./src/templates/post.js","webpack:///./src/images/me-medium.jpg"],"names":["props","seoData","author","datePublished","title","me","type","JSON","stringify","require","BlogPostTemplate","renderGetInTouch","features","feature","split","includes","isFeatureOn","className","href","render","post","this","data","markdownRemark","site","siteMetadata","siteTitle","siteUrl","keywords","description","blogListingTitle","frontmatter","blogUrl","path","headProps","date","excerpt","Fragment","mode","dangerouslySetInnerHTML","__html","html","React","Component","pageQuery","module","exports"],"mappings":"uOAIe,WAACA,GAEZ,IAAMC,EAAU,CACZ,WAAY,qBACZ,QAAS,cACT,OAAUD,EAAME,OAChB,cAAiBF,EAAMG,cACvB,SAAYH,EAAMI,MAClB,MAAS,CACL,QAAS,cACT,IAAOC,IACP,OAAU,MACV,MAAS,OAEb,UAAa,CACT,QAAS,eACT,KAAQ,SACR,KAAQ,CACJ,QAAS,cACT,IAAOA,OAKnB,OACI,kBAAC,IAAD,KACI,4BAAQC,KAAK,uBACRC,KAAKC,UAAUP,M,sDCvBhCQ,EAAQ,QAER,IAeMC,E,wLAEJC,iBAAA,SAAiBC,GAEf,OAnBgB,SAACC,EAASD,GAE5B,QAAKA,KAIiBA,EAASE,MAAM,KAEnBC,SAASF,GAWrBG,CAAY,cAAeJ,GAE3B,yBAAKK,UAAU,uEACb,yBAAKA,UAAU,6CACb,uBACEC,KAAK,gBACLD,UAAU,+EAFZ,kBAYN,oC,EAIJE,OAAA,WAEE,IAAMC,EAAOC,KAAKrB,MAAMsB,KAAKC,eAFtB,EAULF,KAAKrB,MAAMsB,KAAKE,KAAKC,aALrBC,EALK,EAKLA,UACAC,EANK,EAMLA,QAEAC,GARK,EAOLC,YAPK,EAQLD,UACA1B,EATK,EASLA,OAGI4B,EAAsBV,EAAKW,YAAY3B,MAAvB,MAAkCsB,EAClDM,EAAO,GAAML,EAAUP,EAAKW,YAAYE,KAE1CC,EAAY,CACd9B,MAAO0B,EACPF,WACA1B,SACAC,cAAeiB,EAAKW,YAAYI,KAChCN,YAAaT,EAAKgB,QAClBT,QAASK,GAGX,OACE,kBAAC,IAAMK,SAAP,KACE,kBAAC,IAASH,GACV,kBAAC,EAAaA,GACd,kBAAC,IAAD,CAAQI,KAAM,UAAWlC,MAAOgB,EAAKW,YAAY3B,QACjD,yBAAKa,UAAU,wBACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,UACb,yBACEA,UAAU,uGACVsB,wBAAyB,CAAEC,OAAQpB,EAAKqB,QAEzCpB,KAAKV,iBAAiBS,EAAKW,YAAYnB,e,GA5DvB8B,IAAMC,WAuExBC,GAFElC,YAEO,e,qBChGtBmC,EAAOC,QAAU,IAA0B","file":"component---src-templates-post-js-98641307535447b61729.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet';\nimport me from '../images/me-medium.jpg';\n\nexport default (props) => {\n\n    const seoData = {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"BlogPosting\",\n        \"author\": props.author,\n        \"datePublished\": props.datePublished,\n        \"headline\": props.title,\n        \"image\": {\n            \"@type\": \"imageObject\",\n            \"url\": me,\n            \"height\": \"640\",\n            \"width\": \"800\"\n        },\n        \"publisher\": {\n            \"@type\": \"Organization\",\n            \"name\": \"Mintuz\",\n            \"logo\": {\n                \"@type\": \"imageObject\",\n                \"url\": me\n            }\n        }\n    };\n\n    return (\n        <Helmet>\n            <script type=\"application/ld+json\">\n                {JSON.stringify(seoData)}\n            </script>\n        </Helmet>\n    );\n};","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport Link from \"gatsby-link\";\nimport get from \"lodash/get\";\nimport Head from '../components/head';\nimport HeadBlog from '../components/head-blog';\nimport Header from '../components/header';\n\nrequire(\"prismjs/themes/prism-tomorrow.css\");\n\nconst isFeatureOn = (feature, features) => {\n\n  if (!features) {\n    return false;\n  }\n\n  const featuresArray = features.split(':');\n\n  if (featuresArray.includes(feature)) {\n    return true;\n  }\n\n  return false;\n};\n\nclass BlogPostTemplate extends React.Component {\n\n  renderGetInTouch(features) {\n\n    if (isFeatureOn('cta-contact', features)) {\n      return (\n        <div className=\"o-grid__col o-grid__col--1/1 o-grid__col--1/3@bp-mx p-post__sidebar\">\n          <div className=\"p-post__sidebar-content u-pt+ u-pt0@bp-mx\">\n            <a\n              href=\"/get-in-touch\"\n              className=\"o-btn o-btn--large o-btn--light-gray o-btn--block u-text-align-center u-mb+\"\n            >\n            Get in touch\n            </a>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <noscript />\n    );\n  }\n\n  render() {\n\n    const post = this.props.data.markdownRemark;\n\n\t\tconst {\n      siteTitle,\n      siteUrl,\n      description,\n      keywords,\n      author\n\t\t} = this.props.data.site.siteMetadata;\n\n    const blogListingTitle = `${post.frontmatter.title} | ${siteTitle}`;\n    const blogUrl = `${siteUrl}${post.frontmatter.path}`;\n\n\t\tconst headProps = {\n      title: blogListingTitle,\n      keywords,\n      author,\n      datePublished: post.frontmatter.date,\n      description: post.excerpt,\n      siteUrl: blogUrl\n    }\n\n    return (\n      <React.Fragment>\n        <Head {...headProps} />\n        <HeadBlog {...headProps} />\n        <Header mode={'compact'} title={post.frontmatter.title} />\n        <div className=\"o-main u-pv++ p-post\">\n          <div className=\"o-wrap\">\n            <div className=\"o-grid\">\n              <div\n                className=\"o-grid__col o-grid__col--1/1 o-grid__col--2/3@bp-mx p-post__body u-pb+ u-pb0@bp-mx u-mb+ u-mb0@bp-mx\"\n                dangerouslySetInnerHTML={{ __html: post.html }}\n              />\n              {this.renderGetInTouch(post.frontmatter.features)}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostByPath($path: String!) {\n    site {\n      siteMetadata {\n        siteTitle\n        siteTitlePrefix\n        googleVerification\n        locale\n        siteUrl\n        author\n        keywords\n        description\n        twitterHandle\n      }\n    }\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      id\n\t\t\thtml\n\t\t\texcerpt\n      frontmatter {\n        path\n        features\n\t\t\t\ttitle\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`;\n","module.exports = __webpack_public_path__ + \"static/me-medium-e886358f24f78ab67d385050bc6fa073.jpg\";"],"sourceRoot":""}